$$wangct-container-start$$

$$wangct-filePath-start$$
arrayUtil.js
$$wangct-filePath-end$$

$$wangct-content-start$$
/**
 * Created by wb-wct427481 on 2018/10/10.
 */

import typeUtil from './typeUtil';

const {isFunction} = typeUtil;

export default {
  toArray(ary){
    return ary instanceof Array ? ary : [ary];
  },
  remove(ary = [],fn){
    fn = isFunction(fn) ? fn : (item,i,ary) => item === fn;
    for(let i = 0;i < ary.length;i++){
      if(fn(ary[i],i,ary)){
        ary.splice(i,1);
        i--;
      }
    }
  },
  toObject(ary = [],field,value){
    const result = {};
    ary.forEach((item,i) => {
      const fieldStr = isFunction(field) ? field(item,i,ary) : item[field] || i;
      result[fieldStr] = isFunction(value) ? value(item,i,ary) : value || item;
    });
    return result;
  },
  noRepeat(ary = []){
    return Array.from(new Set(ary));
  }
};

$$wangct-content-end$$

$$wangct-container-end$$

$$wangct-container-start$$

$$wangct-filePath-start$$
dateUtil.js
$$wangct-filePath-end$$

$$wangct-content-start$$
/**
 * Created by wb-wct427481 on 2018/10/10.
 */


import stringUtil from './stringUtil';

export default {
  toFormat(date,format){
    if(!(date instanceof Date)){
      format = date;
      date = new Date();
    }
    format = format || 'YYYY-MM-DD hh:mm:ss';
    const config = {
      Y: date.getFullYear(),
      M: date.getMonth() + 1,
      D: date.getDate(),
      h: date.getHours(),
      m: date.getMinutes(),
      s: date.getSeconds()
    };
    let result = format;
    Object.keys(config).forEach(key => {
      result = result.replace(new RegExp(`${key  }+`,'g'),(match) => {
        const value = config[key];
        return stringUtil.addZero(value,match.length);
      });
    });
    return result;
  },
  diffDays(date,num){
    return diff(date,'Date',num);
  },
  diffMonths(date,num){
    return diff(date,'Month',num);
  },
  diffYears(date,num){
    return diff(date,'FullYear',num);
  },
  diffHours(date,num){
    return diff(date,'Hours',num);
  },
  diffMinutes(date,num){
    return diff(date,'Minutes',num);
  },
  diffSeconds(date,num){
    return diff(date,'Seconds',num);
  }
};

function diff(date,type = 'Year',num){
  if(!(date instanceof Date)){
    num = date;
    date = new Date();
  }
  const typeAry = ['FullYear','Date','Month','Hours','Minutes','Seconds'];
  const targetDate = new Date(date);
  if(typeAry.indexOf(type) !== -1){
    targetDate[`set${  type}`](targetDate[`get${  type}`]() + num);
  }
  return targetDate;
}

$$wangct-content-end$$

$$wangct-container-end$$

$$wangct-container-start$$

$$wangct-filePath-start$$
index.js
$$wangct-filePath-end$$

$$wangct-content-start$$
/**
 * Created by wb-wct427481 on 2018/9/7.
 */

import dateUtil from './dateUtil';
import stringUtil from './stringUtil';
import arrayUtil from './arrayUtil';
import numberUtil from './numberUtil';
import objectUtil from './objectUtil';
import reactUtil from './reactUtil';
import util from './util';

export {
    dateUtil,
    stringUtil,
    arrayUtil,
    numberUtil,
    objectUtil,
    reactUtil,
    util
};

export default util;
$$wangct-content-end$$

$$wangct-container-end$$

$$wangct-container-start$$

$$wangct-filePath-start$$
numberUtil.js
$$wangct-filePath-end$$

$$wangct-content-start$$
/**
 * Created by wb-wct427481 on 2018/10/11.
 */


export default {
  toNumber(num,dv = 0){
    num = window.parseFloat(num);
    return isNaN(num) ? dv : num;
  }
};

$$wangct-content-end$$

$$wangct-container-end$$

$$wangct-container-start$$

$$wangct-filePath-start$$
objectUtil.js
$$wangct-filePath-end$$

$$wangct-content-start$$
/**
 * Created by wb-wct427481 on 2018/10/10.
 */
import arrayUtil from './arrayUtil';

export default {
  toObject(obj){
    return new Object(obj);
  },
  forEach(obj,fn){
    Object.keys(obj).forEach((key) => {
      fn(obj[key],key,obj);
    });
  },
  clone(obj = {},keys = []){
    return arrayUtil.toObject(keys,item => item,item => obj[item]);
  },
  filter(obj,fn){
    return this.clone(obj,Object.keys(obj).filter((key) => fn(obj[key],key,obj)));
  },
  map(obj,fn){
    return arrayUtil.toObject(Object.keys(obj),item => item,item => fn(obj[item],item,obj));
  },
  some(obj,func){
    return Object.keys(obj).some(key => func(obj[key],key,obj));
  },
  every(obj,func){
    return Object.keys(obj).every(key => func(obj[key],key,obj));
  },
  find(obj,func){
    return Object.keys(obj).find(key => func(obj[key],key,obj));
  },
  findIndex(obj,func){
    return Object.keys(obj).findIndex(key => func(obj[key],key,obj));
  }
};

$$wangct-content-end$$

$$wangct-container-end$$

$$wangct-container-start$$

$$wangct-filePath-start$$
reactUtil.js
$$wangct-filePath-end$$

$$wangct-content-start$$
/**
 * Created by wb-wct427481 on 2018/10/11.
 */
import util from './util';

export default {
  getProps,
  setHistory,
  getHistory,
  setDispatch,
  getDispatch
};

function getProps(target){
  return {
    ...target.state,
    ...target.props
  }
}

function setHistory(history){
  this.history = history;
}

function getHistory(){
  return this.history || window.history;
}

function setDispatch(dispatch){
  this.dispatch = dispatch;
}

function getDispatch(modelName = 'global') {
  return (action) => {
    let {type = ''} = action;
    type = type.includes('/') ? type : modelName + '/' + type;
    const typeAry = type.split('/');
    type = typeAry[0] === 'global' ? typeAry[1] : type;
    util.callFunc(this.dispatch,{
      ...action,
      type
    });
  }
}

function loading(func,msg) {
  const dispatch = this.getDispatch();
  dispatch({
    type: 'global/loading',
    message: msg || '正在加载数据，请稍候...'
  });
  util.callFunc(func, () => {
    dispatch({
      type: 'global/loading'
    });
  });
}
$$wangct-content-end$$

$$wangct-container-end$$

$$wangct-container-start$$

$$wangct-filePath-start$$
stringUtil.js
$$wangct-filePath-end$$

$$wangct-content-start$$
/**
 * Created by wb-wct427481 on 2018/10/10.
 */

export default {
  toString(str){
    return str ? str + '' : '';
  },
  computeDiff(self = '',other = ''){
    const len = Math.max(self.length,other.length);
    let selfNum = 0;
    let otherNum = 0;
    const n = 4;
    new Array(len).fill().forEach((m,i) => {
      selfNum += self[i] ? self.charCodeAt(i) / (100 ** (i - n)) : 0;
      otherNum += other[i] ? other.charCodeAt(i) / (100 ** (i - n)) : 0;
    });
    return selfNum - otherNum;
  },
  addZero(str,len,prefix = true){
    const fstr = str.toString();
    const extStr = '0'.repeat(len - fstr.length);
    return prefix ? extStr + fstr : fstr + extStr;
  },
  toMoneyFormat(str = '0'){
    return parseInt(this.toNumber(str,0),10).toString().replace(/\B(?=(\d{3})+$)/g,',')
  },
  decodeHtml(str = ''){
    const config = {
      amp: '&',
      apos: '\'',
      lt: '<',
      gt: '>',
      quot: '"',
      nbsp: '\xa0',
      middot: '·',
      rdquo: '”',
      ldquo: '“',
      mdash: '—',
      deg:'°',
      bull:'•',
      auml:'ä',
      sup1:'¹',
      eacute:'é',
      ccedil:'ç',
      frac34:'¾',
      egrave:'è',
      acute:'´',
      sect:'§',
      raquo:'»',
      aelig:'æ',
      iexcl:'¡',
      yen:'¥',
      aring:'å',
      curren:'¤',
      copy:'©',
      iuml:'ï',
      frac14:'¼',
      ordm:'º',
      not:'¬',
      iquest:'¿',
      cedil:'¸',
      pound:'£',
      reg:'®',
      shy:'­',
      sup3:'³',
      macr:'¯',
      plusmn:'±',
      laquo:'«',
      frac12:'½',
      sup2:'²',
      brvbar:'¦',
      cent:'¢',
      para:'¶',
      ordf:'ª'
    };
    const re = /&([a-z0-9]+);/ig;
    const newStr = str.replace(re, (match, matchKey) => {
      const key = matchKey.toLowerCase();
      return config[key] ? config[key] : match;
    });
    return newStr === str ? newStr : this.decodeHtml(newStr);
  },
  toNumber(str,value){
    const num = Number(str);
    return isNaN(num)
      ? value === undefined
      ? num : value : num;
  },
  parse(str = '',equalSep = '=',linkSep = '&'){
    const result = {};
    str.split(linkSep).forEach(item => {
      const temp = item.split(equalSep);
      result[temp[0] && temp[0].trim()] = decodeURIComponent(temp[1] && temp[1].trim());
    });
    return result;
  },
  stringify(data,equalSep = '=',linkSep = '&'){
    return Object.keys(data).filter(key => data[key] !== undefined).map(key => `${key}${equalSep}${data[key]}`).join(linkSep);
  }
};


$$wangct-content-end$$

$$wangct-container-end$$

$$wangct-container-start$$

$$wangct-filePath-start$$
typeUtil.js
$$wangct-filePath-end$$

$$wangct-content-start$$
/**
 * Created by wb-wct427481 on 2019/2/14.
 */



export default {
  isFunction(target){
    return typeof target === 'function';
  },
  isObject(target){
    return typeof target === 'object';
  },
  isBoolean(target){
    return typeof target === 'boolean';
  },
  isArray(target){
    return target instanceof Array;
  },
  isNumber(target){
    return typeof target === 'number';
  },
  isString(target){
    return typeof target === 'string';
  },
  isUndefined(target){
    return target === undefined;
  },
  isNull(target){
    return target === null;
  }
}
$$wangct-content-end$$

$$wangct-container-end$$

$$wangct-container-start$$

$$wangct-filePath-start$$
util.js
$$wangct-filePath-end$$

$$wangct-content-start$$
/**
 * Created by wb-wct427481 on 2018/9/7.
 */

import typeUtil from './typeUtil';

export default {
  equal,
  queue,
  cache,
  callFunc,
  random,
  loadScript,
  concatClassName,
  ...typeUtil
};




function callFunc(fn,...ary){
  if(typeUtil.isFunction(fn)){
    return fn.call(this,...ary);
  }
}

function equal(self,other){
  const {isObject} = typeUtil;
  if(isObject(self) && isObject(other)){
    const keys = Object.keys(self);
    return keys.length === Object.keys(other).length && keys.every(key => self[key] === other[key])
  }else{
    return self === other;
  }
}

function queue(option){
  return new Queue(option);
}


/**
 * 队列执行，根据数组按顺序执行
 * @param opt       配置项有：       list execFunc limit success
 * @constructor
 */
class Queue{
  state = {
    limit:1,
    interval:10,
    runCount:0,
    list:[],
    result:[],
  };

  constructor(option){
    this.setConfig(option);
  }

  setConfig(option){
    this.config = {
      ...this.state,
      ...option
    };
    this.start();
  }

  start(){
    const {runCount,limit} = this.config;
    new Array(limit - runCount).fill().forEach(() => {
      this.config.runCount += 1;
      this.exec();
    });
  }

  exec(){
    const {getItem,list,func,success,result,interval} = this.config;
    const item = getItem ? getItem(this.config) : list.shift();
    if(item === undefined){
      this.config.runCount -= 1;
      if(this.config.runCount === 0 && typeof success === 'function'){
        success(result);
      }
    }else{
      func(item,(data) => {
        if(data){
          this.config.result.push(data);
        }
        setTimeout(() => {
          this.exec();
        },interval);
      });
    }
  }
}


function cache(options){
  return new CacheData(options);
}


class CacheData{
  state = {
    limit:100
  };

  constructor(options = {}){
    this.props = {
      ...this.state,
      ...options
    };
  }

  cache = {};

  getItem(key){
    const item = this.cache[key];
    return item && item.value;
  }

  setItem(key,value){
    const allCache = this.cache;
    allCache[key] = {
      key,
      value,
      time:+new Date()
    };
    const keys = Object.keys(allCache);
    if(keys.length > this.props.limit){
      const deleteKey = keys.sort((a,b) => allCache[a].time - allCache[b].time)[0];
      delete allCache[deleteKey];
    }
    return this;
  }
}


function random(){
  return parseInt(+Math.random().toString().substr(3) + +new Date()).toString(36)
}

function loadScript(src,cb){
  const script = document.createElement('script');
  script.src = src;
  src.onload = cb;
  try{
    document.head.appendChild(script);
  }catch(e){
    console.error(e);
  }
}

function concatClassName(){
  return Array.from(arguments).filter(item => !!item).join(' ');
}
$$wangct-content-end$$

$$wangct-container-end$$

